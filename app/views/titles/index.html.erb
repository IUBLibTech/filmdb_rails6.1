<h4>Title Search</h4>
<%= form_tag titles_search_path, method: :post do %>
  <%= hidden_field_tag :ts, Process.clock_gettime(Process::CLOCK_MONOTONIC) %>
<table>
	<tr>
		<th>Title Text</th>
		<td colspan="3">
      <%= text_field_tag :title_text, params[:title_text] %>
		</td>
	</tr>
  <tr>
    <th>Series Name</th>
    <td colspan="3">
      <%= text_field_tag :series_name_text, params[:series_name_text] %>
    </td>
  </tr>
	<tr>
		<th>Date</th>
		<td colspan="3">
			<%= text_field_tag :date, params[:date] %>
		</td>
	</tr>
	<tr>
		<th>Publisher</th>
		<td colspan="3">
			<%= text_field_tag :publisher_text, params[:publisher_text] %>
		</td>
	</tr>
	<tr>
		<th>Creator</th>
		<td colspan="3">
      <%= text_field_tag :creator_text, params[:creator_text] %>
		</td>
	</tr>
	<tr>
		<th>Genre</th>
		<td colspan="3"><%= text_field_tag :genre, params[:genre] %></td>
	</tr>
	<tr>
		<th>Form</th>
		<td colspan="3"><%= text_field_tag :form, params[:form] %></td>
	</tr>
  <tr>
    <th>Summary</th>
    <td colspan="3"><%= text_field_tag :summary_text, params[:summary_text] %></td>
  </tr>
  <tr>
    <th>Location</th>
    <td colspan="3"><%= text_field_tag :location_text, params[:location_text] %></td>
  </tr>
  <tr>
    <th>Subject</th>
    <td colspan="3"><%= text_field_tag :subject_text, params[:subject_text] %></td>
  </tr>
	<tr>
		<th>Search Within Collection</th>
		<td colspan="3">
			<%= select_tag :collection_id, options_for_select([['All', "0"]] + Collection.all.order(:name).collect{ |c| [c.name, c.id]}, params[:collection_id]) %>
		</td>
	</tr>
  <tr>
    <th>Digitized Status</th>
    <td>
      <%= radio_button_tag :digitized_status, "all", checked='checked'  %>All<br>
      <%= radio_button_tag :digitized_status, "digitized"  %>Digitized<br>
      <%= radio_button_tag :digitized_status, "not_digitized"  %>Not Digitized<br>
    </td>
		<th>Filter By Medium</th>
		<td>
			<%= check_box_tag :all_medium, "all_medium", params[:medium_filter].blank? || params[:medium_filter] == "0" %>All<br>
			<%= check_box_tag :film_medium, "film_medium", (params[:medium_filter].to_i & 1 == 1) , { class: "po_medium", "data_mask": 1 } %>Film<br>
			<%= check_box_tag :video_medium, "video_medium", (params[:medium_filter].to_i & 2 == 2), class: "po_medium", "data_mask": 2 %>Video<br>
			<%= check_box_tag :sound_medium, "sound_medium", (params[:medium_filter].to_i & 4 == 4), class: "po_medium", "data_mask": 4 %>Recorded Sound<br>
			<%= hidden_field_tag :medium_filter, params[:medium_filter] ? params[:medium_filter] : 0 %>
		</td>
  </tr>
	<tr>
		<td colspan="4">
      <div class="left _50">
        <%= submit_tag 'Search' %>
      </div>
      <div>
        <% if @titles && @titles.size > 0 %>
					<% path = title_xls_search_path(params.permit(
						:authenticity_token, :ts, :commit, :title_text, :series_name_text, :date, :publisher_text, :creator_text,
						:genre, :form, :summary_text, :location_text, :subject_text, :collection_id, :digitized_status, :medium_filter).to_h.symbolize_keys.merge) %>
          <%= link_to "Download Search Results", path, target: "_blank"  %>
        <% end %>
      </div>
		</td>
	</tr>
</table>
<% end %>

<% if @titles %>
<br>
<br>
<% if @paginate %>
		<%= render partial: 'paginator' %>
<% end %>
<table>
	<tr>
		<th>Title</th>
    <th>Series Title</th>
		<th>Date(s)</th>
		<th>Publisher(s)</th>
		<th>Creator(s)</th>
		<th>Physical Object(s) Summary</th>
	</tr>
	<% @titles.each do |t| %>
    <% if t.digitized? %>
      <tr class="digitized_tr">
    <% else %>
      <% c = t.count_selected_for_digitization %>
      <tr class="<%= c > 0 ? '' : 'not_digitized' %>">
    <% end %>
		<td>
      <% if t.fully_cataloged %>
        <%= image_tag('paw.png', class: 'cat') %>
      <% end %>
      <%= link_to t.title_text, title_path(t) %>
    </td>
    <td>
      <%= t.series_title_text %>
    </td>
		<td>
			<ul>
			<% t.title_dates.each do |td| %>
				<li>
					<b><%= td.date_type %>: <%= td.date_to_s %></b>
				</li>
			<% end %>
			</ul>
		</td>
		<td>
			<ul>
			<% t.title_publishers.each do |tp| %>
				<li>
					<b><%= tp.publisher_type %></b>: <%= tp.name %>
				</li>
			<% end %>
			</ul>
		</td>
		<td>
			<ul>
				<% t.title_creators.each do |tc| %>
				<li>
					<b><%= tc.role %></b>: <%= tc.name %>
				</li>
				<% end %>
			</ul>
		</td>
		<td>
			<ul>
				<li>
					<b>Physical Object Count</b>: <%= t.physical_objects.size %>
				</li>
				<li>
					<b>Generations</b>: <%= t.physical_objects.collect{ |p| p.humanize_boolean_generation_fields }.flatten.sort.uniq.join(', ') %>
				</li>
				<li>
					<b>Gauges/Formats</b>: <%= t.physical_objects.collect{ |p| p.specific.medium_name }.uniq.join(', ') %>
				</li>
				<li>
					<b>Physical Objects Selected for Digitization</b>: <%= c %>
				</li>
			</ul>
		</td>
	</tr>
	<% end %>
</table>
<% end %>
<button id="to_top" onclick="topOfPage()" title="Return to top of page">Back to Top</button>
<script type="text/javascript">

	let topButton = document.getElementById("to_top")


	function topOfPage() {
		document.body.scrollTop = 0;
		document.documentElement.scrollTop = 0;
	}

	$(window).scroll( function() {
		if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
			topButton.style.display = "block";
		} else {
			topButton.style.display = "none";
		}
	});

	let avail_genres = <%= ControlledVocabulary.where(model_type: "TitleGenre").pluck(:value).to_json.html_safe %>;
	let avail_forms = <%= ControlledVocabulary.where(model_type: "TitleForm").pluck(:value).to_json.html_safe %>;
	$(document).ready(function() {
		$('#date').bind('input',function() {
			let y = /^[0-9]{4}$/;
			let yy = /^[0-9]{4}\s{0,1}-\s{0,1}[0-9]{4}$/
			if (y.test($(this).val()) || yy.test($(this).val()) || $(this).val().length == 0) {
				$(this).removeClass('bad_barcode');
			} else {
				$(this).addClass('bad_barcode')
			}
		});
		// hook in the checkboxes to be range selectable
		let checks = $('input:checkbox')
		let lastChecked = null;
		checks.click(function(e) {
			if (!lastChecked) {
				lastChecked = this;
			} else if (e.shiftKey) {
				var start = $('input:checkbox').index(this);
				var end = $('input:checkbox').index(lastChecked);
				$('input:checkbox').slice(Math.min(start, end), Math.max(start, end) + 1).prop('checked', lastChecked.checked)
			}
			lastChecked = this;

			var ids = [];
			$(':checked.title_check').each(function() {
				var x = this;
				ids.push(this.id)
			});
			$('#title_ids').val(ids.join(','));
			return true;
		});
		$("#form").autocomplete({
			source: avail_forms
		});
		$("#genre").autocomplete({
			source: avail_genres
		});

		$("#all_medium").change(function(e) {
			if (this.checked) {
				$(".po_medium").prop( "checked", false );
			} else {
				//don't allow user unchecking the all cb
				if ($(".po_medium:checked").size() == 0) {
					this.checked = !this.checked;
				}
			}
			set_medium_mask();
		})

		$(".po_medium").change(function(e) {
			if (this.checked) {
				if ($(".po_medium:checked").size() == 3) {
					$(".po_medium").prop("checked", false);
					$("#all_medium").prop("checked", true);
				} else {
					$("#all_medium").prop("checked", false);
				}
			}
			//check to see if last of checked mediums is unchecked
			if ($(".po_medium:checked").size() == 0) {
				$("#all_medium").prop("checked", true);
			}
			set_medium_mask();
		})

		let set_medium_mask = function() {
			let mask = 0;
			$(".po_medium:checked[data_mask]").each(function() {
				mask += Number($(this).attr("data_mask"));
			})
			$("#medium_filter").val(mask);
		}



	});


</script>