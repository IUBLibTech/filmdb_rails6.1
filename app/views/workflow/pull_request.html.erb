<h4>Physical Objects Queued for Pull Request</h4>
<table id="physical_objects_table">
	<tr>
		<th>Select To Pull</th>
		<th>Title(s)</th>
		<th>IU Barcode</th>
		<th>Can Size</th>
		<th>Gauge/Format</th>
		<th>Queued By</th>
		<th>Last Filmdb Storage Location</th>
		<th>ALF Location</th>
		<th>Cancel</th>
	</tr>
	<% @physical_objects.each do |p| %>
    <% p = p.specific %>
	<tr>
		<%
			storage_name = p.last_known_storage_location
			freezer_item = WorkflowStatus.is_freezer_storage?(storage_name)
			alf_status = status_from_itemloclist(p.iu_barcode)
			in_alf = alf_status == AlfHelper::IN_ALF
			can_pull = freezer_item || in_alf || p.last_known_storage_location == WorkflowStatus::IN_STORAGE_AWAITING_INGEST
		%>
		<% if can_pull %>
			<td><%= check_box_tag "po_#{p.acting_as.id}", '', false, {class: "cg_#{p.active_component_group.group_type.tr('()','').tr(' ','_').downcase}"}%></td>
		<% else %>
			<td class="warning">Cannot Pull</td>
		<% end %>

		<td>
			<% p.titles.each do |t| %>
				<%= link_to "#{t.title_text}", title_path(t) %> <br>
			<% end %>
		</td>
		<td><%= link_to p.iu_barcode, physical_object_path(p.acting_as) %></td>
		<td><%= p.has_attribute?(:can_size) ? p.can_size : ''%></td>
		<td><%= p.medium_name %></td>
		<td><%= p.current_workflow_status.user.name %></td>
		<td class="<%= can_pull && in_alf ? "" : "warning" %>"><%= storage_name %></td>
		<% if can_pull && in_alf %>
			<td><%= alf_status %></td>
		<% else %>
			<% if freezer_item %>
				<td class="warn">Freezer Item - IULMIA Staff Pull</td>
			<% else %>
				<td class="warning"><%= alf_status %></td>
			<% end %>
		<% end %>

		<% if can_pull %>
			<td><%= link_to "Remove from Queue", '#', id: "po_#{p.acting_as.id}", class: 'remove_from_queue' %></td>
		<% else %>
			<% if policy(User).can_change_location? %>
				<td><%= link_to "Correct Location", correct_location_path, id: "po_#{p.acting_as.id}", class: 'remove_from_queue' %></td>
			<% else %>
				<td>Contact Carmel about the Filmdb/ALF location conflict</td>
			<% end %>
		<% end %>
	</tr>
	<% end %>
	<tr>
		<td colspan="2">
			<%= form_tag(process_pull_requested_path) do %>
				<%= hidden_field_tag 'ids', '' %>
				<%= submit_tag 'Submit Pull Request' %>
			<% end %>
		</td>
	</tr>
</table>

<script type="text/javascript">
	var lastChecked = null;
	$(document).ready(function() {
		$('input:checkbox').click(function(e) {
			if (!lastChecked) {
				lastChecked = this;
				setChecked();
				return;
			}
			if (e.shiftKey) {
				var start = $('input:checkbox').index(this);
				var end = $('input:checkbox').index(lastChecked);
				$('input:checkbox').slice(Math.min(start, end), Math.max(start,end) + 1).prop('checked', lastChecked.checked)
			}
			setChecked();
			lastChecked = this;
		});
		$('.remove_from_queue').click(function(event) {
			event.preventDefault();
			clicked = $(this);
			swal({
					title: 'Remove from Queue',
					text: 'Are you sure you want to remove this Physical Object from the Queue?',
					type: 'warning',
					showCancelButton: true,
					confirmButtonText: 'Remove from Queue',
					closeOnConfirm: false
				},
				function(isConfirm){
					if (isConfirm) {
						id = clicked.attr('id').substring(3);
						var url = './ajax_cancel_queued_pull_request/' + id;
						$.ajax({
							url: url,
							method: 'POST',
							error: function(jqXHR, textStatus, errorThrown) {
								swal({
									title: 'Ajax Error',
									text: 'An error occured while making an AJAX call. When this dialog closes, Filmdb will redirect to the underlying error page. Please screen shot the error page and forward it to Carmel.'
								}, function() {
									window.location.replace(url)
								});
							},
							success: function (result) {
								swal({
										title: 'Reponse',
										text: "Queued pull requests were cancelled for the following physical objects: "+result,
										html: true
									},
									function() {
										location.reload();
									})
							}
						})
					}
				})
		});
	})
	// sets the hidden po ids attribute on the form
	function setChecked() {
		var po_ids = [];
		$(':checked').each(function() {
			var x = this;
			po_ids.push(this.id.substring(3))
		});
		$('#ids').val(po_ids.join(','));
		updateCounts();
	}
	function updateCounts() {
		all = $(':checked').size();
		ref = $(':checked.cg_reformatting_mdpi').size();
		bc_alf = $(':checked.cg_best_copy_mdpi').size();
		bc_wells = $(':checked.cg_best_copy_mdpi_-_wells').size();
		$("#selected_count").html(all)
		$("#selected_reformatting").html(ref)
		$("#selected_bc_alf").html(bc_alf)
		$("#selected_bc_wells").html(bc_wells)
	}
</script>